Description: 'AWS ParallelCluster UI'

Parameters:
  AdminUserEmail:
    Description: Email address of administrative user to setup by default (only with new Cognito instances).
    Type: String
    Default: ''
  UserPoolId:
    Description: UserPoolId of a previously deployed PCUI Cognito User Pool. Leave blank to create a new one.
    Type: String
    Default: ''
  UserPoolAuthDomain:
    Description: UserPoolAuthDomain of a previously deployed PCUI Cognito User Pool. Leave blank to create a new one.
    Type: String
    Default: ''
  SNSRole:
    Description: SNSRole ARN of a previously deployed PCUI Cognito Stack. Leave blank to create a new one.
    Type: String
    Default: ''
  Version:
    Description: Version of AWS ParallelCluster to deploy
    Type: String
    Default: 3.5.0
  PCUIVersion:
    Description: Version of AWS ParallelCluster to deploy
    Type: String
    Default: latest
  InfrastructureBucket:
    Description: (Optional) S3 bucket where CloudFormation files are stored. Change this parameter only when testing changes made to the infrastructure itself.
    Type: String
    Default: ''

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Admin User (only with new Cognito instances)
        Parameters: 
          - AdminUserEmail
      - Label:
          default: (Optional) External PCUI Cognito
        Parameters:
          - UserPoolId
          - UserPoolAuthDomain
          - SNSRole
      - Label:
          default: ParallelCluster API
        Parameters:
          - Version
      - Label:
          default: (Debugging only) Infrastructure S3 Bucket
        Parameters:
          - InfrastructureBucket

    ParameterLabels:
      AdminUserEmail:
        default: Admin's Email
      UserPoolId:
        default: UserPoolId from a previously deployed PCUI
      UserPoolAuthDomain:
        default: UserPoolAuthDomain from a previously deployed PCUI
      SNSRole:
        default: SNSRole ARN from a previously deployed PCUI

Conditions:
  HasDefaultInfrastructure: !Equals [!Ref InfrastructureBucket, '']
  UseExistingCognito:
    !And
      - !Not [!Equals [!Ref UserPoolId, ""]]
      - !Not [!Equals [!Ref UserPoolAuthDomain, ""]]
      - !Not [!Equals [!Ref SNSRole, ""]]
  UseNewCognito:
    !Not [ Condition: UseExistingCognito ]
  HasDefaultPCInfrastructure: !Equals [!FindInMap [ParallelCluster, Constants, Bucket ], '']

Mappings:
  ParallelClusterUI:
    Constants:
      Version: 2023.02.0 # format YYYY.MM.REVISION
  ParallelCluster:
    Constants:
      Bucket: ''  # default ParallelCluster bucket

Resources:

  Cognito:
    Condition: UseNewCognito
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Retain
    Properties:
      Parameters:
        AdminUserEmail: !Ref AdminUserEmail
      TemplateURL: !Sub 
        - 'https://s3.${AWS::URLSuffix}/${Bucket}/parallelcluster-ui/${PCUIVersion}/templates/parallelcluster-ui-cognito.yaml'
        - Bucket: !If
          - HasDefaultInfrastructure
          - PLACEHOLDER
          - !Ref InfrastructureBucket
          PCUIVersion: !Ref PCUIVersion

      TimeoutInMinutes: 10

  ParallelClusterApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ApiDefinitionS3Uri: !Sub
          - s3://${Bucket}/parallelcluster/${Version}/api/ParallelCluster.openapi.yaml
          - { Bucket: !If [ HasDefaultPCInfrastructure, !Sub "${AWS::Region}-aws-parallelcluster", !FindInMap [ParallelCluster, Constants, Bucket]]}
        CreateApiUserRole: False
        EnableIamAdminAccess: True
        CustomBucket: !If
          - HasDefaultPCInfrastructure
          - !Sub ${AWS::Region}-aws-parallelcluster
          - !FindInMap [ParallelCluster, Constants, Bucket ]
        PoliciesTemplateUri: !Sub 
          - https://${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}/parallelcluster/${Version}/templates/policies/policies.yaml
          - { Bucket: !If [ HasDefaultPCInfrastructure, !Sub "${AWS::Region}-aws-parallelcluster", !FindInMap [ParallelCluster, Constants, Bucket]]}
      TemplateURL: !Sub https://pcluster-cfn-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/parallelcluster/${Version}/api/parallelcluster-api.yaml
      TimeoutInMinutes: 30

  PclusterUILayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub PCUILayer-${AWS::StackName}
      Description: Library which contains aws-parallelcluster-ui python package and dependencies
      Content:
        S3Bucket: !If [ HasDefaultInfrastructure, !Sub "pcluster-cfn-${AWS::Region}",!Ref InfrastructureBucket ]
        S3Key: !Sub
          - parallelcluster-ui/${Version}/layers/aws-parallelcluster-ui/layer.zip
          - { Version: !Ref PCUIVersion }
      CompatibleRuntimes:
        - python3.9


  ParallelClusterUIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ParallelClusterUIUserRole.Arn
      MemorySize: 512
      Timeout: 30
      Tags:
        - Key: 'parallelcluster:ui:version'
          Value: !FindInMap [ ParallelClusterUI, Constants, Version ]
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          PYTHONUNBUFFERED: 1
          STATIC_PATH: /opt/frontend/public/
          BUCKET: !Ref InfrastructureBucket
          PCUI_STACK_ID: !Ref AWS::StackId
          PCUI_VERSION: !Ref PCUIVersion
          API_BASE_URL: !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]
          API_VERSION: !Ref Version
          SITE_URL: !Sub
           - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}
           - Api: !Ref ApiGateway
          AUTH_PATH: !If [ UseExistingCognito, !Ref UserPoolAuthDomain, !GetAtt [ Cognito, Outputs.UserPoolAuthDomain ]]
          SECRET_ID: !GetAtt UserPoolClientSecret.SecretName
          AUDIENCE: !Ref CognitoAppClient
          OIDC_PROVIDER: 'Cognito'
      FunctionName: !Sub
        - ParallelClusterUIFunction-${StackIdSuffix}
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Handler: index.handler
      Layers:
        - !Ref PclusterUILayer
      Runtime: python3.9
      Code:
        ZipFile: |
          import logging
          import os
          from os import environ
          from typing import Any, Dict


          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          from awslambda.serverless_wsgi import handle_request
          import pcui.app

          # Initialize as a global to re-use across Lambda invocations
          pcluster_ui_api = None  # pylint: disable=invalid-name

          profile = environ.get("PROFILE", "prod")
          is_dev_profile = profile == "dev"

          if is_dev_profile:
              logger.info("Running with dev profile")
              environ["FLASK_ENV"] = "development"
              environ["FLASK_DEBUG"] = "1"

          def _init_flask_app():
              return pcui.app.run()

          def handler(event: Dict[str, Any], context) -> Dict[str, Any]:
              try:
                  global pcluster_ui_api  # pylint: disable=global-statement,invalid-name
                  if not pcluster_ui_api:
                      logger.info("Initializing Flask Application")
                      pcluster_ui_api = _init_flask_app()
                  os.environ["AWS_DEFAULT_REGION"] = os.environ["AWS_REGION"]
                  return handle_request(pcluster_ui_api, event, context)
              except Exception as e:
                  logger.critical("Unexpected exception: %s", e, exc_info=True)
                  raise Exception("Unexpected fatal exception. Please look at API logs for details on the encountered failure.")

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ParallelClusterUI
      Description: ParallelClusterUI Lambda Proxy
      ProtocolType: HTTP
      Tags:
        'parallelcluster:ui:version': !FindInMap [ParallelClusterUI, Constants, Version]

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $default
      Target: !Sub
        - 'integrations/${IntegrationId}'
        - { IntegrationId: !Ref ApiGatewayIntegration }

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      Description: 'ANY integration'
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ParallelClusterUIFunction-${StackIdSuffix}/invocations
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      PayloadFormatVersion: 2.0
      TimeoutInMillis: 30000

  ApiGatewayAccessLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      AccessLogSettings: 
        DestinationArn: !GetAtt ApiGatewayAccessLog.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","path":"$context.path", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: True
      DefaultRouteSettings:
        ThrottlingBurstLimit: 50 
        ThrottlingRateLimit: 100

  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Sub
          - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/login
          - Api: !Ref ApiGateway
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !If [ UseExistingCognito, !Ref UserPoolId, !GetAtt [ Cognito, Outputs.UserPoolId ]]
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 7
      AccessTokenValidity: 10
      IdTokenValidity: 10
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"

  UserPoolClientSecret:
    Type: Custom::UserPoolClientSecret
    Properties:
      ServiceToken: !GetAtt UserPoolClientSecretFunction.Arn
      UserPoolId: !If [ UseExistingCognito, !Ref UserPoolId, !GetAtt [ Cognito, Outputs.UserPoolId ]]
      AppClientId: !Ref CognitoAppClient

  UserPoolClientSecretFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 20
      TracingConfig:
        Mode: Active
      Role: !GetAtt UserPoolClientSecretRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import random
          import string
          import json

          cognito = boto3.client("cognito-idp")
          secretsmanager = boto3.client("secretsmanager")

          def generate_secret(stack_name, resource_id):
              alnum = string.ascii_uppercase + string.digits
              return f"{stack_name}-{resource_id}-" + "".join(random.choice(alnum) for _ in range(12))

          def handler(event, context):
              print(event)
              print("boto version {}".format(boto3.__version__))

              stack_name = event["StackId"].split("/")[1]
              user_pool_id = event["ResourceProperties"]["UserPoolId"]
              app_client_id = event["ResourceProperties"]["AppClientId"]
              logical_resource_id = event["LogicalResourceId"]

              response_data = {}
              reason = None
              response_status = cfnresponse.SUCCESS
              try:
                  if event["RequestType"] == "Create":
                      response_data["Message"] = "Resource creation successful!"

                      user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=app_client_id)
                      client_secret = user_pool_client["UserPoolClient"]["ClientSecret"]
                      secret_name = generate_secret(stack_name, logical_resource_id)

                      secret = json.dumps({"userPoolId": user_pool_id, "clientId": app_client_id, "clientSecret": client_secret})

                      resp = secretsmanager.create_secret(
                          Name=secret_name,
                          Description=f"Client Secret for {app_client_id} / user pool {user_pool_id}",
                          SecretString=secret,
                          Tags=[
                              {"Key": "custom:cloudformation:stack-name", "Value": stack_name},
                              {"Key": "custom:cloudformation:logical-id", "Value": logical_resource_id},
                          ],
                      )
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"], "SecretVersionId": resp["VersionId"]}

                  elif event["RequestType"] == "Update":
                      user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=app_client_id)
                      client_secret = user_pool_client["UserPoolClient"]["ClientSecret"]
                      secret_name = event["PhysicalResourceId"]
                      secret = json.dumps({"userPoolId": user_pool_id, "clientId": app_client_id, "clientSecret": client_secret})
                      resp = secretsmanager.update_secret(
                          SecretId=secret_name,
                          Description=f"Client Secret for {app_client_id} / user pool {user_pool_id}",
                          SecretString=secret,
                      )
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"], "SecretVersionId": resp["VersionId"]}

                  else:
                      secret_name = event["PhysicalResourceId"]
                      resp = secretsmanager.delete_secret(SecretId=secret_name, ForceDeleteWithoutRecovery=True)
                      response_data = {"SecretArn": resp["ARN"], "SecretName": resp["Name"]}

              except Exception as exception:
                  response_status = cfnresponse.FAILED
                  reason = "Failed {}: {}".format(event["RequestType"], exception)

              cfnresponse.send(event, context, response_status, response_data, secret_name, reason)

  UserPoolClientSecretRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CognitoPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
                    - { UserPoolId: !If [UseExistingCognito, !Ref UserPoolId, !GetAtt [ Cognito, Outputs.UserPoolId ]]}
        - PolicyName: SecretsManagerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:TagResource
                  - secretsmanager:UpdateSecret
                  - secretsmanager:DeleteSecret
                Resource:
                  - !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}*

  ParallelClusterUILambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParallelClusterUIFunction}
      RetentionInDays: 90


  ParallelClusterUIUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        # Required for Lambda logging and XRay
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # Required to run ParallelClusterUI functionalities
        - !Ref CognitoPolicy
        - !Ref StoragePolicy
        - !Ref PricingPolicy
        - !Ref SsmPolicy
        - !Ref InfrastructurePolicy


  ParallelClusterUIApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ParallelClusterUIFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*
        - { ApiGateway: !Ref ApiGateway }


  CognitoPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - cognito-idp:AdminRemoveUserFromGroup
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:ListUsers
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            Resource: !Sub
              - arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
              - { UserPoolId: !If [UseExistingCognito, !Ref UserPoolId, !GetAtt [ Cognito, Outputs.UserPoolId ]]}
            Effect: Allow
            Sid: CognitoPolicy
          - Action:
            - secretsmanager:GetSecretValue
            Resource:
              - !GetAtt UserPoolClientSecret.SecretArn
            Effect: Allow
            Sid: SecretsRole

  StoragePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ec2:DescribeSecurityGroups
            - ec2:DescribeVpcs
            - ec2:DescribeInstanceTypes
            - ec2:DescribeSubnets
            - ec2:DescribeKeyPairs
            Resource:
              - '*'
            Effect: Allow
            Sid: EC2Policy
          - Action:
            - ec2:StartInstances
            - ec2:StopInstances
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*
            Condition:
              StringLike:
                ec2:ResourceTag/parallelcluster:version: "*"
            Effect: Allow
            Sid: EC2ManagePolicy
          - Action:
              - fsx:DescribeFileSystems
              - fsx:DescribeVolumes
            Resource:
              - !Sub arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:volume/*
              - !Sub arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:file-system/*
            Effect: Allow
            Sid: FsxPolicy
          - Action:
              - elasticfilesystem:DescribeFileSystems
            Resource:
              - !Sub arn:${AWS::Partition}:elasticfilesystem:*:${AWS::AccountId}:file-system/*
            Effect: Allow
            Sid: EfsPolicy

  InfrastructurePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
            Effect: Allow
            Sid: InfrastructureCloudFormationPolicy
          - Action:
              - lambda:PublishLayerVersion
              - lambda:GetLayerVersion
              - lambda:DeleteLayerVersion
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:PCUILayer-${AWS::StackName}*
            Effect: Allow
            Sid: InfrastructureLambdaLayerPolicy
          - Action:
              - lambda:UpdateFunctionConfiguration
              - lambda:UpdateFunctionCode
              - lambda:ListTags
            Resource:
              - !Sub
                - arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ParallelClusterUIFunction-${StackIdSuffix}*
                - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
            Effect: Allow
            Sid: InfrastructureLambdaPolicy
          - Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${InfrastructureBucket}
            Condition: {"StringLike":{"s3:prefix":["parallelcluster-ui/*"]}}
            Effect: Allow
            Sid: InfrastructureS3Policy
          - Action:
              - s3:GetObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${InfrastructureBucket}/parallelcluster-ui/*
              - !Sub arn:${AWS::Partition}:s3:::${InfrastructureBucket}/parallelcluster/*
              - !Sub arn:${AWS::Partition}:s3:::${AWS::Region}-aws-parallelcluster/parallelcluster/*
            Effect: Allow
            Sid: InfrastructureS3LayerPolicy
          - Action:
              - execute-api:Invoke
            Effect: Allow
            Resource: !Sub
              - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PCApiGateway}/*/*
              - { PCApiGateway: !Select [2, !Split ['/', !Select [0, !Split ['.', !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]]]]] }
            Sid: InfrastructureAPIProxyPolicy
          - Action:
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:GetPolicy
              - iam:SimulatePrincipalPolicy
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*
              - !Sub arn:${AWS::Partition}:iam::aws:policy/*
            Effect: Allow
            Sid: InfrastructureIamRead
          - Action:
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-ParallelClusterUIUserRole-*
            Effect: Allow
            Sid: InfrastructureIamPassRole

  PricingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - pricing:GetProducts
            Resource:
              - '*'
            Effect: Allow
            Sid: PricingPolicy

  SsmPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*
            Effect: Allow
            Sid: SsmSendPolicyInstance
            Condition:
              StringLike:
                ssm:resourceTag/parallelcluster:version: "*"
          - Action:
            - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:*::document/AWS-RunShellScript
            Effect: Allow
            Sid: SsmSendPolicyCommand
          - Action:
            - ssm:GetCommandInvocation
            Resource:
              - '*'
            Effect: Allow
            Sid: SsmGetCommandInvocationPolicy


Outputs:
  ParallelClusterUILambdaArn:
    Description: 'ARN of the ParallelCluster UI Lambda function'
    Value: !GetAtt ParallelClusterUIFunction.Arn
  ParallelClusterUIUrl:
    Description: 'Url to reach the ParallelCluster UI Site.'
    Export:
      Name: !Sub ${AWS::StackName}-ParallelClusterUISite
    Value: !Sub
      - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}
      - Api: !Ref ApiGateway
  AppClientId:
    Description: The id of the Cognito app client
    Value: !Ref CognitoAppClient
  UserPoolClientSecretArn:
    Description: The app client secret ARN for ParallelCluster UI.
    Value: !GetAtt UserPoolClientSecret.SecretArn
  UserPoolClientSecretName:
    Description: The app client secret name for ParallelCluster UI.
    Value: !GetAtt UserPoolClientSecret.SecretName
